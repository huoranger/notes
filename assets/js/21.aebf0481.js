(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{342:function(t,a,s){"use strict";s.r(a);var n=s(7),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"认识微服务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#认识微服务"}},[t._v("#")]),t._v(" 认识微服务")]),t._v(" "),a("h3",{attrs:{id:"单体架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单体架构"}},[t._v("#")]),t._v(" 单体架构")]),t._v(" "),a("p",[a("strong",[t._v("单体架构")]),t._v("：将业务的所有功能集中在一个项目中开发，打成一个包部署。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.xn2001.com/img/2021/20210901083809.png!/format/webp",alt:"img"}})]),t._v(" "),a("p",[a("strong",[t._v("优点")]),t._v("：架构简单，部署成本低")]),t._v(" "),a("p",[a("strong",[t._v("缺点")]),t._v("：耦合度高（维护困难、升级困难）")]),t._v(" "),a("h3",{attrs:{id:"分布式架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分布式架构"}},[t._v("#")]),t._v(" 分布式架构")]),t._v(" "),a("p",[a("strong",[t._v("分布式架构")]),t._v("：根据业务功能对系统做拆分，每个业务功能模块作为独立项目开发，称为一个服务。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.xn2001.com/img/2021/20210901092921.png!/format/webp",alt:"img"}})]),t._v(" "),a("p",[a("strong",[t._v("优点")]),t._v("：降低服务耦合，有利于服务升级和拓展")]),t._v(" "),a("p",[a("strong",[t._v("缺点")]),t._v("：服务调用关系错综复杂")]),t._v(" "),a("p",[t._v("分布式架构虽然降低了服务耦合，但是服务拆分时也有很多问题需要思考：")]),t._v(" "),a("ul",[a("li",[t._v("服务拆分的粒度如何界定？")]),t._v(" "),a("li",[t._v("服务之间如何调用？")]),t._v(" "),a("li",[t._v("服务的调用关系如何管理？")])]),t._v(" "),a("h3",{attrs:{id:"微服务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#微服务"}},[t._v("#")]),t._v(" 微服务")]),t._v(" "),a("p",[t._v("微服务的架构特征：")]),t._v(" "),a("ul",[a("li",[t._v("单一职责：微服务拆分粒度更小，每一个服务都对应唯一的业务能力，做到单一职责")]),t._v(" "),a("li",[t._v("自治：团队独立、技术独立、数据独立，独立部署和交付")]),t._v(" "),a("li",[t._v("面向服务：服务提供统一标准的接口，与语言和技术无关")]),t._v(" "),a("li",[t._v("隔离性强：服务调用做好隔离、容错、降级，避免出现级联问题")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.xn2001.com/img/2022/202205162352847.png!/format/webp",alt:"img"}})]),t._v(" "),a("p",[t._v("微服务的上述特性"),a("strong",[t._v("其实是在给分布式架构制定一个标准")]),t._v("，进一步降低服务之间的耦合度，提供服务的独立性和灵活性。做到高内聚，低耦合。")]),t._v(" "),a("p",[t._v("因此，"),a("strong",[t._v("可以认为微服务是一种经过良好架构设计的分布式架构方案")]),t._v(" 。其中在 Java 领域最引人注目的就是 SpringCloud 提供的方案了。")]),t._v(" "),a("h3",{attrs:{id:"springcloud"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#springcloud"}},[t._v("#")]),t._v(" SpringCloud")]),t._v(" "),a("p",[t._v("SpringCloud 是目前国内使用最广泛的微服务框架。官网地址："),a("a",{attrs:{href:"https://spring.io/projects/spring-cloud",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://spring.io/projects/spring-cloud"),a("OutboundLink")],1),t._v("。")]),t._v(" "),a("p",[t._v("SpringCloud 集成了各种微服务功能组件，并基于 SpringBoot 实现了这些组件的自动装配，从而提供了良好的开箱即用体验。")]),t._v(" "),a("p",[t._v("其中常见的组件包括：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.xn2001.com/img/2021/20210901083717.png!/format/webp",alt:"img"}})]),t._v(" "),a("p",[t._v("另外，SpringCloud 底层是依赖于 SpringBoot 的，并且有版本的兼容关系，如下：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.xn2001.com/img/2021/20210901084050.png!/format/webp",alt:"img"}})]),t._v(" "),a("h3",{attrs:{id:"技术栈对比"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#技术栈对比"}},[t._v("#")]),t._v(" 技术栈对比")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.xn2001.com/img/2021/20210901090726.png!/format/webp",alt:"img"}})]),t._v(" "),a("h2",{attrs:{id:"eureka注册中心"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#eureka注册中心"}},[t._v("#")]),t._v(" Eureka注册中心")]),t._v(" "),a("p",[t._v("最广为人知的注册中心就是 Eureka，其结构如下：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.xn2001.com/img/2021/20210901090919.png!/format/webp",alt:"img"}})]),t._v(" "),a("h3",{attrs:{id:"搭建注册中心"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#搭建注册中心"}},[t._v("#")]),t._v(" 搭建注册中心")]),t._v(" "),a("h4",{attrs:{id:"搭建-eureka-server"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#搭建-eureka-server"}},[t._v("#")]),t._v(" 搭建 eureka-server")]),t._v(" "),a("p",[t._v("引入 SpringCloud 为 eureka 提供的 starter 依赖，注意这里是用 "),a("strong",[t._v("server")])]),t._v(" "),a("div",{staticClass:"language-xml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("org.springframework.cloud"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("spring-cloud-starter-netflix-eureka-server"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("h4",{attrs:{id:"编写启动类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编写启动类"}},[t._v("#")]),t._v(" 编写启动类")]),t._v(" "),a("p",[t._v("注意要添加一个 "),a("code",[t._v("@EnableEurekaServer")]),t._v(" "),a("strong",[t._v("注解")]),t._v("，开启 eureka 的"),a("strong",[t._v("注册中心")]),t._v("功能")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@SpringBootApplication")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@EnableEurekaServer")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("EurekaApplication")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SpringApplication")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("EurekaApplication")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h4",{attrs:{id:"编写配置文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编写配置文件"}},[t._v("#")]),t._v(" 编写配置文件")]),t._v(" "),a("p",[t._v("编写一个 application.yml 文件，内容如下：")]),t._v(" "),a("div",{staticClass:"language-yml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("server")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("port")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10086")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spring")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("application")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" eureka"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("server\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("eureka")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("client")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("service-url")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("defaultZone")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" http"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("//127.0.0.1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("10086/eureka\n")])])]),a("p",[t._v("其中 "),a("code",[t._v("default-zone")]),t._v(" 是因为前面配置类开启了注册中心所需要配置的 eureka 的"),a("strong",[t._v("地址信息")]),t._v("，因为 eureka 本身也是一个微服务，这里也要将自己注册进来，当后面 eureka "),a("strong",[t._v("集群")]),t._v("时，这里就可以填写多个，使用 “,” 隔开。")]),t._v(" "),a("p",[t._v("启动完成后，访问 "),a("a",{attrs:{href:"http://localhost:10086/",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://localhost:10086/"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"服务注册"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#服务注册"}},[t._v("#")]),t._v(" 服务注册")]),t._v(" "),a("p",[t._v("引入 SpringCloud 为 eureka 提供的 starter 依赖，注意这里是用 "),a("strong",[t._v("client")])]),t._v(" "),a("div",{staticClass:"language-xml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("org.springframework.cloud"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("spring-cloud-starter-netflix-eureka-client"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("p",[t._v("在启动类上添加注解："),a("code",[t._v("@EnableEurekaClient")])]),t._v(" "),a("p",[t._v("在 application.yml 文件，添加下面的配置：")]),t._v(" "),a("div",{staticClass:"language-yml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spring")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("application")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#name：orderservice")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" userservice\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("eureka")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("client")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("service-url")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("defaultZone")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" http"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("127.0.0.1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("10086/eureka\n")])])]),a("h3",{attrs:{id:"服务拉取"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#服务拉取"}},[t._v("#")]),t._v(" 服务拉取")]),t._v(" "),a("p",[t._v("首先给 "),a("code",[t._v("RestTemplate")]),t._v(" 这个 Bean 添加一个 "),a("code",[t._v("@LoadBalanced")]),t._v(" "),a("strong",[t._v("注解")]),t._v("，用于开启"),a("strong",[t._v("负载均衡")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Bean")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@LoadBalanced")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RestTemplate")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("restTemplate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RestTemplate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("访问服务")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" url "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://服务名/user/"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" order"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getUserId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),t._v(" user "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" restTemplage"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getForObject")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("url"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"ribbon负载均衡"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ribbon负载均衡"}},[t._v("#")]),t._v(" Ribbon负载均衡")]),t._v(" "),a("p",[t._v("我们添加了 "),a("code",[t._v("@LoadBalanced")]),t._v(" 注解，即可实现负载均衡功能，这是什么原理呢？")]),t._v(" "),a("p",[a("strong",[t._v("SpringCloud 底层提供了一个名为 Ribbon 的组件，来实现负载均衡功能。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.xn2001.com/img/2021/20210901091242.png!/format/webp",alt:"img"}})]),t._v(" "),a("h3",{attrs:{id:"源码跟踪"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#源码跟踪"}},[t._v("#")]),t._v(" 源码跟踪")]),t._v(" "),a("p",[t._v("为什么我们只输入了 service 名称就可以访问了呢？为什么不需要获取 ip 和端口，这显然有人帮我们根据 service 名称，获取到了服务实例的ip和端口。它就是"),a("code",[t._v("LoadBalancerInterceptor")]),t._v("，这个类会在对 RestTemplate 的请求进行拦截，然后从 Eureka 根据服务 id 获取服务列表，随后利用负载均衡算法得到真实的服务地址信息，替换服务 id。")]),t._v(" "),a("p",[t._v("我们进行源码跟踪：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.xn2001.com/img/2021/20210901091323.png!/format/webp",alt:"img"}})]),t._v(" "),a("p",[t._v("这里的 "),a("code",[t._v("intercept()")]),t._v(" 方法，拦截了用户的 HttpRequest 请求，然后做了几件事：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("request.getURI()")]),t._v("：获取请求uri，即 http://user-service/user/8")]),t._v(" "),a("li",[a("code",[t._v("originalUri.getHost()")]),t._v("：获取uri路径的主机名，其实就是服务id "),a("code",[t._v("user-service")])]),t._v(" "),a("li",[a("code",[t._v("this.loadBalancer.execute()")]),t._v("：处理服务id，和用户请求")])]),t._v(" "),a("p",[t._v("这里的 "),a("code",[t._v("this.loadBalancer")]),t._v(" 是 "),a("code",[t._v("LoadBalancerClient")]),t._v(" 类型继续跟入 "),a("code",[t._v("execute()")]),t._v(" 方法：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.xn2001.com/img/2021/20210901091330.png!/format/webp",alt:"img"}})]),t._v(" "),a("ul",[a("li",[a("code",[t._v("getLoadBalancer(serviceId)")]),t._v("：根据服务 id 获取 "),a("code",[t._v("ILoadBalancer")]),t._v("，而 "),a("code",[t._v("ILoadBalancer")]),t._v(" 会拿着服务 id 去 eureka 中获取服务列表。")]),t._v(" "),a("li",[a("code",[t._v("getServer(loadBalancer)")]),t._v("：利用内置的负载均衡算法，从服务列表中选择一个。在图中"),a("strong",[t._v("可以看到获取了8082端口的服务")])])]),t._v(" "),a("p",[t._v("可以看到获取服务时，通过一个 "),a("code",[t._v("getServer()")]),t._v(" 方法来做负载均衡:")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.xn2001.com/img/2021/20210901091345.png!/format/webp",alt:"img"}})]),t._v(" "),a("p",[t._v("我们继续跟入：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.xn2001.com/img/2021/20210901091355.png!/format/webp",alt:"img"}})]),t._v(" "),a("p",[t._v("继续跟踪源码 "),a("code",[t._v("chooseServer()")]),t._v(" 方法，发现这么一段代码：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.xn2001.com/img/2021/20210901091414.png!/format/webp",alt:"img"}})]),t._v(" "),a("p",[t._v("我们看看这个 "),a("code",[t._v("rule")]),t._v(" 是谁：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.xn2001.com/img/2021/20210901091432.png!/format/webp",alt:"img"}})]),t._v(" "),a("p",[t._v("这里的 rule 默认值是一个 "),a("code",[t._v("RoundRobinRule")]),t._v(" ，看类的介绍：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.xn2001.com/img/2021/20210901091442.png!/format/webp",alt:"img"}})]),t._v(" "),a("blockquote",[a("p",[t._v("负载均衡默认使用了轮训算法，当然我们也可以自定义。")])]),t._v(" "),a("h3",{attrs:{id:"流程总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#流程总结"}},[t._v("#")]),t._v(" 流程总结")]),t._v(" "),a("p",[t._v("SpringCloud Ribbon 底层采用了一个拦截器，拦截了 RestTemplate 发出的请求，对地址做了修改。")]),t._v(" "),a("p",[t._v("基本流程如下：")]),t._v(" "),a("ul",[a("li",[t._v("拦截我们的 "),a("code",[t._v("RestTemplate")]),t._v(" 请求 http://userservice/user/1")]),t._v(" "),a("li",[a("code",[t._v("RibbonLoadBalancerClient")]),t._v(" 会从请求url中获取服务名称，也就是 user-service")]),t._v(" "),a("li",[a("code",[t._v("DynamicServerListLoadBalancer")]),t._v(" 根据 user-service 到 eureka 拉取服务列表")]),t._v(" "),a("li",[t._v("eureka 返回列表，localhost:8081、localhost:8082")]),t._v(" "),a("li",[a("code",[t._v("IRule")]),t._v(" 利用内置负载均衡规则，从列表中选择一个，例如 localhost:8081")]),t._v(" "),a("li",[a("code",[t._v("RibbonLoadBalancerClient")]),t._v(" 修改请求地址，用 localhost:8081 替代 userservice，得到 http://localhost:8081/user/1，发起真实请求")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.xn2001.com/img/2021/20210901091755.png!/format/webp",alt:"img"}})]),t._v(" "),a("h4",{attrs:{id:"负载均衡策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#负载均衡策略"}},[t._v("#")]),t._v(" 负载均衡策略")]),t._v(" "),a("p",[t._v("负载均衡的规则都定义在 IRule 接口中，而 IRule 有很多不同的实现类：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.xn2001.com/img/2021/20210901091811.png!/format/webp",alt:"img"}})]),t._v(" "),a("p",[t._v("不同规则的含义如下：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[a("strong",[t._v("内置负载均衡规则类")])]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[a("strong",[t._v("规则描述")])])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("RoundRobinRule")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("简单轮询服务列表来选择服务器。它是Ribbon默认的负载均衡规则。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("AvailabilityFilteringRule")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("对以下两种服务器进行忽略：（1）在默认情况下，这台服务器如果3次连接失败，这台服务器就会被设置为“短路”状态。短路状态将持续30秒，如果再次连接失败，短路的持续时间就会几何级地增加。 （2）并发数过高的服务器。如果一个服务器的并发连接数过高，配置了AvailabilityFilteringRule 规则的客户端也会将其忽略。并发连接数的上限，可以由客户端设置。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("WeightedResponseTimeRule")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("为每一个服务器赋予一个权重值。服务器响应时间越长，这个服务器的权重就越小。这个规则会随机选择服务器，这个权重值会影响服务器的选择。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("strong",[t._v("ZoneAvoidanceRule")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("以区域可用的服务器为基础进行服务器的选择。使用Zone对服务器进行分类，这个Zone可以理解为一个机房、一个机架等。而后再对Zone内的多个服务做轮询。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("BestAvailableRule")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("忽略那些短路的服务器，并选择并发数较低的服务器。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("RandomRule")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("随机选择一个可用的服务器。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("RetryRule")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("重试机制的选择逻辑")])])])]),t._v(" "),a("p",[t._v("默认的实现就是 "),a("code",[t._v("ZoneAvoidanceRule")]),t._v("，"),a("strong",[t._v("是一种轮询方案")]),t._v("。")]),t._v(" "),a("h4",{attrs:{id:"自定义策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自定义策略"}},[t._v("#")]),t._v(" 自定义策略")]),t._v(" "),a("p",[t._v("通过定义 IRule 实现可以修改负载均衡规则，有两种方式：")]),t._v(" "),a("ol",[a("li",[t._v("代码方式在 order-service 中的 OrderApplication 类中，定义一个新的 IRule")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.xn2001.com/img/2021/20210901091832.png!/format/webp",alt:"img"}})]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("配置文件方式：在 order-service 的 application.yml 文件中，添加新的配置也可以修改规则：")])]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("userservice")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 给需要调用的微服务配置负载均衡规则，orderservice服务去调用userservice服务")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ribbon")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("NFLoadBalancerRuleClassName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" com.netflix.loadbalancer.RandomRule "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 负载均衡规则 ")]),t._v("\n")])])]),a("blockquote",[a("p",[a("strong",[t._v("注意")]),t._v("：一般用默认的负载均衡规则，不做修改。")])]),t._v(" "),a("h4",{attrs:{id:"饥饿加载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#饥饿加载"}},[t._v("#")]),t._v(" 饥饿加载")]),t._v(" "),a("p",[t._v("当我们启动 orderservice，第一次访问时，时间消耗会大很多，这是因为 Ribbon 懒加载的机制。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.xn2001.com/img/2021/20210901091850.png!/format/webp",alt:"img"}})]),t._v(" "),a("p",[t._v("Ribbon 默认是采用懒加载，即第一次访问时才会去创建 LoadBalanceClient，拉取集群地址，所以请求时间会很长。")]),t._v(" "),a("p",[t._v("而饥饿加载则会在项目启动时创建 LoadBalanceClient，降低第一次访问的耗时，通过下面配置开启饥饿加载：")]),t._v(" "),a("div",{staticClass:"language-yml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ribbon")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("eager-load")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("enabled")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("true")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("clients")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" userservice "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# 项目启动时直接去拉取userservice的集群，多个用","隔开')]),t._v("\n")])])]),a("h2",{attrs:{id:"nacos注册中心"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nacos注册中心"}},[t._v("#")]),t._v(" Nacos注册中心")]),t._v(" "),a("p",[t._v("SpringCloudAlibaba 推出了一个名为 Nacos 的注册中心，在国外也有大量的使用。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.xn2001.com/img/2021/20210901091857.png!/format/webp",alt:"img"}})]),t._v(" "),a("p",[t._v("解压启动 Nacos，详细请看 "),a("a",{attrs:{href:"https://www.xn2001.com/archives/661.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Nacos安装指南"),a("OutboundLink")],1)]),t._v(" "),a("div",{staticClass:"language-shel extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("startup.cmd -m standalone\n")])])]),a("p",[t._v("访问："),a("a",{attrs:{href:"http://localhost:8848/nacos/",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://localhost:8848/nacos/"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"服务注册-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#服务注册-2"}},[t._v("#")]),t._v(" 服务注册")]),t._v(" "),a("p",[t._v("这里上来就直接服务注册，很多东西可能有疑惑，其实 Nacos 本身就是一个 SprintBoot 项目，这点你从启动的控制台打印就可以看出来，所以就不再需要去额外搭建一个像 Eureka 的注册中心。")]),t._v(" "),a("h4",{attrs:{id:"引入依赖"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#引入依赖"}},[t._v("#")]),t._v(" 引入依赖")]),t._v(" "),a("p",[t._v("在 cloud-demo 父工程中引入 SpringCloudAlibaba 的依赖：")]),t._v(" "),a("div",{staticClass:"language-xml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("com.alibaba.cloud"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("spring-cloud-alibaba-dependencies"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("version")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("2.2.6.RELEASE"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("version")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("type")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("pom"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("type")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("scope")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("import"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("scope")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("p",[t._v("然后在 user-service 和 order-service 中的pom文件中引入 nacos-discovery 依赖：")]),t._v(" "),a("div",{staticClass:"language-xml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("com.alibaba.cloud"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("spring-cloud-starter-alibaba-nacos-discovery"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("h4",{attrs:{id:"配置nacos地址"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置nacos地址"}},[t._v("#")]),t._v(" 配置nacos地址")]),t._v(" "),a("p",[t._v("在 user-service 和 order-service 的 application.yml 中添加 nacos 地址：")]),t._v(" "),a("div",{staticClass:"language-yml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spring")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("cloud")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("nacos")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("server-addr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 127.0.0.1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8848")]),t._v("\n")])])]),a("p",[t._v("// TODO")]),t._v(" "),a("h2",{attrs:{id:"feign远程调用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#feign远程调用"}},[t._v("#")]),t._v(" Feign远程调用")]),t._v(" "),a("p",[t._v("我们以前利用 RestTemplate 发起远程调用的代码：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.xn2001.com/img/2021/20210901092616.png!/format/webp",alt:"img"}})]),t._v(" "),a("ul",[a("li",[t._v("代码可读性差，编程体验不统一")]),t._v(" "),a("li",[t._v("参数复杂URL难以维护")])]),t._v(" "),a("p",[t._v("Feign 是一个声明式的 http 客户端，官方地址："),a("a",{attrs:{href:"https://github.com/OpenFeign/feign",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/OpenFeign/feign"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("其作用就是帮助我们"),a("strong",[t._v("优雅的实现 http 请求的发送")]),t._v("，解决上面提到的问题。")]),t._v(" "),a("h3",{attrs:{id:"feign使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#feign使用"}},[t._v("#")]),t._v(" Feign使用")]),t._v(" "),a("h4",{attrs:{id:"引入依赖-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#引入依赖-2"}},[t._v("#")]),t._v(" 引入依赖")]),t._v(" "),a("p",[t._v("我们在 order-service 引入 feign 依赖：")]),t._v(" "),a("div",{staticClass:"language-xml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("org.springframework.cloud"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("spring-cloud-starter-openfeign"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("h4",{attrs:{id:"添加注解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#添加注解"}},[t._v("#")]),t._v(" 添加注解")]),t._v(" "),a("p",[t._v("在 order-service 启动类添加 "),a("code",[t._v("@EnableFeignClient")]),t._v(" 注解开启 Feign")]),t._v(" "),a("h4",{attrs:{id:"请求接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#请求接口"}},[t._v("#")]),t._v(" 请求接口")]),t._v(" "),a("p",[t._v("在 order-service 中新建一个接口，内容如下")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@FeignClient")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"userservice"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserClient")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@GetMapping")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/user/{id}"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("findById")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@PathVariable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"id"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Long")]),t._v(" id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ul",[a("li",[a("p",[a("code",[t._v('@FeignClient("userservice")')]),t._v("：其中参数填写的是微服务名")])]),t._v(" "),a("li",[a("p",[a("code",[t._v('@GetMapping("/user/{id}")')]),t._v("：其中参数填写的是请求路径")])])]),t._v(" "),a("p",[t._v("这个客户端主要是基于 SpringMVC 的注解 "),a("code",[t._v("@GetMapping")]),t._v(" 来声明远程调用的信息，Feign 可以帮助我们发送 http 请求，无需自己使用 RestTemplate 来发送了。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Autowired")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserClient")]),t._v(" userClient"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Order")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("queryOrderAndUserById")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Long")]),t._v(" orderId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1.查询订单")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Order")]),t._v(" order "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" orderMapper"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("findById")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("orderId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// TODO: 2021/8/20 使用feign远程调用")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),t._v(" user "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" userClient"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("findById")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("order"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getUserId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3. 将用户信息封装进订单")]),t._v("\n    order"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setUser")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 4.返回")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" order"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("// TODO")]),t._v(" "),a("h2",{attrs:{id:"gateway网关"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gateway网关"}},[t._v("#")]),t._v(" Gateway网关")]),t._v(" "),a("p",[t._v("Spring Cloud Gateway 是 Spring Cloud 的一个全新项目，该项目是基于 Spring 5.0，Spring Boot 2.0 和 Project Reactor 等响应式编程和事件流技术开发的网关，它旨在为微服务架构提供一种简单有效的统一的 API 路由管理方式。")]),t._v(" "),a("p",[t._v("Gateway 网关是我们服务的守门神，"),a("strong",[t._v("所有微服务的统一入口。")])]),t._v(" "),a("p",[t._v("网关的"),a("strong",[t._v("核心功能特性")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("请求路由")]),t._v(" "),a("li",[t._v("权限控制")]),t._v(" "),a("li",[t._v("限流")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.xn2001.com/img/2021/20210901092857.png!/format/webp",alt:"img"}})]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("权限控制")]),t._v("：网关作为微服务入口，需要校验用户是是否有请求资格，如果没有则进行拦截。")]),t._v(" "),a("li",[a("strong",[t._v("路由和负载均衡")]),t._v("：一切请求都必须先经过 gateway，但网关不处理业务，而是根据某种规则，把请求转发到某个微服务，这个过程叫做路由。当然路由的目标服务有多个时，还需要做负载均衡。")]),t._v(" "),a("li",[a("strong",[t._v("限流")]),t._v("：当请求流量过高时，在网关中按照下流的微服务能够接受的速度来放行请求，避免服务压力过大。")])]),t._v(" "),a("p",[t._v("在 SpringCloud 中网关的实现包括两种：")]),t._v(" "),a("ul",[a("li",[t._v("gateway")]),t._v(" "),a("li",[t._v("zuul")])]),t._v(" "),a("p",[t._v("Zuul 是基于 Servlet 实现，属于阻塞式编程。而 Spring Cloud Gateway 则是基于 Spring5 中提供的WebFlux，属于响应式编程的实现，具备更好的性能。")]),t._v(" "),a("h3",{attrs:{id:"入门使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#入门使用"}},[t._v("#")]),t._v(" 入门使用")]),t._v(" "),a("ol",[a("li",[t._v("创建 SpringBoot 工程 gateway，引入网关依赖")]),t._v(" "),a("li",[t._v("编写启动类")]),t._v(" "),a("li",[t._v("编写基础配置和路由规则")]),t._v(" "),a("li",[t._v("启动网关服务进行测试")])]),t._v(" "),a("div",{staticClass:"language-xml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!--网关--\x3e")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("org.springframework.cloud"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("spring-cloud-starter-gateway"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!--nacos服务发现依赖--\x3e")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("com.alibaba.cloud"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("spring-cloud-starter-alibaba-nacos-discovery"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("p",[t._v("application.yml 文件")]),t._v(" "),a("div",{staticClass:"language-yml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("server")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("port")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10010")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 网关端口")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spring")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("application")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" gateway "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 服务名称")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("cloud")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("nacos")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("server-addr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" localhost"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8848")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# nacos地址")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("gateway")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("routes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 网关路由配置")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("service "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 路由id，自定义，只要唯一即可")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# uri: http://127.0.0.1:8081 # 路由的目标地址 http就是固定地址")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("uri")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" lb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("//userservice "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 路由的目标地址 lb就是负载均衡，后面跟服务名称")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("predicates")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 路由断言，也就是判断请求是否符合路由规则的条件")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" Path=/user/"),a("span",{pre:!0,attrs:{class:"token important"}},[t._v("**")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 这个是按照路径匹配，只要以/user/开头就符合要求")]),t._v("\n")])])]),a("p",[t._v("我们将符合"),a("code",[t._v("Path")]),t._v(" 规则的一切请求，都代理到 "),a("code",[t._v("uri")]),t._v("参数指定的地址。")]),t._v(" "),a("p",[t._v("上面的例子中，我们将 "),a("code",[t._v("/user/**")]),t._v(" 开头的请求，代理到 "),a("code",[t._v("lb://userservice")]),t._v("，其中 lb 是负载均衡(LoadBalance)，根据服务名拉取服务列表，实现负载均衡。")]),t._v(" "),a("p",[t._v("重启网关，访问 "),a("a",{attrs:{href:"http://localhost:10010/user/1",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://localhost:10010/user/1"),a("OutboundLink")],1),t._v(" 时，符合 "),a("code",[t._v("/user/**")]),t._v(" 规则，请求转发到 uri：http://userservice/user/1")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.xn2001.com/img/2021/202108220127419.png!/format/webp",alt:"img"}})]),t._v(" "),a("p",[t._v("路由配置包括：")]),t._v(" "),a("ol",[a("li",[t._v("路由id：路由的唯一标示")]),t._v(" "),a("li",[t._v("路由目标（uri）：路由的目标地址，http代表固定地址，lb代表根据服务名负载均衡")]),t._v(" "),a("li",[t._v("路由断言（predicates）：判断路由的规则")]),t._v(" "),a("li",[t._v("路由过滤器（filters）：对请求或响应做处理")])]),t._v(" "),a("blockquote",[a("p",[t._v("多个 predicates 的话，要同时满足规则")])]),t._v(" "),a("p",[t._v("// TODO")])])}),[],!1,null,null,null);a.default=e.exports}}]);